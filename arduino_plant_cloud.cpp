#include "arduino_secrets.h"
// Adafruit GFX Library - Version: Latest 
#include <Adafruit_GFX.h>
#include <Adafruit_GrayOLED.h>
#include <Adafruit_SPITFT.h>
#include <Adafruit_SPITFT_Macros.h>
#include <gfxfont.h>

// moisture sensor
// Adafruit SSD1306 - Version: Latest 
#include <Adafruit_SSD1306.h>
#include <splash.h>

// DEFINING OLED DISPLAY VALUES 
#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 64 
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C // olded Address

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// DHT sensor library - Version: Latest 
#include <DHT.h>
#include <DHT_U.h>
#define DHTPIN 2 // Digital pin D2 connected to the DHT sensor 
#define DHTTYPE DHT22

DHT_Unified dht(DHTPIN, DHTTYPE);

// forward declarations
float get_curr_temp(DHT_Unified dht);
float get_curr_humidity(DHT_Unified dht);
void pump_control(int moisture_percent);
void set_pump_on();
void set_pump_off();

// defining display func before setup() bc it is called in setup()
void display_initilization() {
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("voltage allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

 // display.setRotation(2); // Rotate 180 degrees
  display.setTextColor(WHITE); // Draw white text
  display.setCursor(0, 0);     // Start at top-left corner
  display.clearDisplay();
}

// capcitive Analog input port
#define SENSOR_PIN A7

// Relay Port
#define RELAY_OUT D3 // pin D3

// default error return value for temp and humidity
#define DEFAULT_ERROR_VALUE 0.0

// constants taken from sensor calibrations
const int max_wet_value = 3861;
const int max_dry_value = 4000;

// Global variables for when there is no wifi
float temp;
float humidity;
int soil_moisture_value;
int soil_moisture_percent;
int pump_trigger = 15;

bool pump_kill_switch = true; // equivalent to on for overriding pump

sensors_event_t event; // adafruit sensor library struct. full library: https://github.com/adafruit/Adafruit_Sensor/blob/master/Adafruit_Sensor.cpp

// Pump Status Text
String status_off = "OFF";
String status_on = "ON";
String pump_status_text = status_off;

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/a7f95547-767e-4d55-ae22-ccf8675293d9 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float curr_humid;
  float curr_temp;
  int curr_moisture;
  int pump_trigger_level;
  bool master_pump_status;
  bool pump_status;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  display_initilization();
  analogSetAttenuation(ADC_0db);
  // using function to convert analog voltage into digital value.Sets ADC to use 12 bits
  analogReadResolution(12);
  // initialize DHT22
  dht.begin();

  // Set Relay as Output
  pinMode(RELAY_OUT, OUTPUT);

  // turn off relay
  digitalWrite(RELAY_OUT, LOW);

  // set cloud pump status
  pump_status = false;

  display.clearDisplay();
}

void loop() {
  ArduinoCloud.update();
  // get Temp and Humidity
  // funcs also set 
  temp = get_curr_temp(dht);
  humidity = get_curr_humidity(dht);

  // set cloud variables
  curr_temp = temp;
  curr_humid = humidity;

  // read sensor value
  soil_moisture_value = analogRead(SENSOR_PIN);
  Serial.print(soil_moisture_value);
  Serial.print(" - ");

  // mapping current value between the max wet/dry values
  soil_moisture_percent = map(soil_moisture_value, max_dry_value, max_wet_value, 0, 100);
  soil_moisture_percent = constrain(soil_moisture_percent, 0, 100);

  // set cloud variable
  curr_moisture = soil_moisture_percent;
  Serial.println(soil_moisture_percent);

  // determine if pump should be triggered
  // check if moisture is below or equal to threshold
  pump_control(soil_moisture_percent);

  Serial.println("Pump Status: " + pump_status_text);

  // cycle values through OLED display
  // pump status
  print_to_oled(35, "PUMP", 40, pump_status_text, 4000);
  // temp
  print_to_oled(35, "TEMP", 10, String(temp) + "°C", 4000);
  // humditiy
  print_to_oled(30, "HUMID", 10, String(humidity) + "%", 4000);
  // soil moisture
  print_to_oled(35, "MOIST", 30, String(soil_moisture_percent) + "%", 4000);
}

void pump_control(int moisture_percent) {
  // check if mastter_pump_status is true (i.e. pump disabled)
  // global pump_kill_switch is set to true
  if (pump_kill_switch) {
      pump_status_text = status_off;
      set_pump_off();
  } else {
    // check moisture level
    if (moisture_percent <= pump_trigger) {
      set_pump_on();
    } else {
      set_pump_off();
    }
  }
}

// FUNCTION DEFINITIONS
void set_pump_on() {
  digitalWrite(RELAY_OUT, HIGH);
  pump_status_text = status_on;
  pump_status = true;
}

void set_pump_off(){
  digitalWrite(RELAY_OUT, LOW);
  pump_status_text = status_off;
  pump_status = false;
}

void print_to_oled(int top_cursor, String top_text, int main_cursor, String main_text, int delay_time){
  // print to oled
  display.setCursor(top_cursor, 0);
  display.setTextSize(2);
  //display.setTextColor(White);
  display.println(top_text);

  display.setCursor(main_cursor, 40);
  display.setTextSize(3);
  //display.setTextColor(White);
  display.println(main_text);

  display.display();

  delay(delay_time);
  display.clearDisplay();
}

// func to display temp reading
float get_curr_temp(DHT_Unified dht) {
  // Get temperature event and print its value.
  sensors_event_t event;
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature)) {
    Serial.println(F("Error reading temperature!"));
    display.println(F("Error reading temperature!"));

    display.display();
    delay(6000);
    display.clearDisplay();
    return DEFAULT_ERROR_VALUE; // return default value if error
  } else {
    Serial.println(F("Temp: "));
    temp = event.temperature;
    Serial.print(temp);
    Serial.println(F("°C"));
    return temp;
  }
}

float get_curr_humidity(DHT_Unified dht) {
  // Get humidity event and print its value.
  dht.humidity().getEvent(&event);
  if (isnan(event.relative_humidity)) {
    display.clearDisplay();
    Serial.println(F("Error reading humidity!"));
    display.println(F("Error reading humidity!"));

    display.display();
    delay(6000);
    display.clearDisplay();
    return DEFAULT_ERROR_VALUE; // return default value if error
  } else {
    Serial.print(F("Humidity: "));
    humidity = event.relative_humidity;
    Serial.print(humidity);
    Serial.println(F("%"));
    return humidity;
  }
}


/*
  Since PumpTriggerLevel is READ_WRITE variable, onPumpTriggerLevelChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPumpTriggerLevelChange()  {
  // csets local pump_trigger value to cloud trigger level when slider is changed
  pump_trigger = pump_trigger_level;
}

/*
  Since MasterPumpStatus is READ_WRITE variable, onMasterPumpStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMasterPumpStatusChange()  {
  // Add your code here to act upon MasterPumpStatus change
  pump_kill_switch = master_pump_status;
}